// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package short_url_micro

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ShorturlClient is the client API for Shorturl service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ShorturlClient interface {
	Register(ctx context.Context, in *RegisterRquest, opts ...grpc.CallOption) (*RegisterResponse, error)
	Verify(ctx context.Context, in *VerifyRequest, opts ...grpc.CallOption) (*VerifyResponse, error)
	Shorten(ctx context.Context, in *ShortenRequest, opts ...grpc.CallOption) (*ShortenResponse, error)
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
}

type shorturlClient struct {
	cc grpc.ClientConnInterface
}

func NewShorturlClient(cc grpc.ClientConnInterface) ShorturlClient {
	return &shorturlClient{cc}
}

func (c *shorturlClient) Register(ctx context.Context, in *RegisterRquest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	out := new(RegisterResponse)
	err := c.cc.Invoke(ctx, "/shorturl.shorturl/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shorturlClient) Verify(ctx context.Context, in *VerifyRequest, opts ...grpc.CallOption) (*VerifyResponse, error) {
	out := new(VerifyResponse)
	err := c.cc.Invoke(ctx, "/shorturl.shorturl/Verify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shorturlClient) Shorten(ctx context.Context, in *ShortenRequest, opts ...grpc.CallOption) (*ShortenResponse, error) {
	out := new(ShortenResponse)
	err := c.cc.Invoke(ctx, "/shorturl.shorturl/Shorten", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shorturlClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, "/shorturl.shorturl/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShorturlServer is the server API for Shorturl service.
// All implementations must embed UnimplementedShorturlServer
// for forward compatibility
type ShorturlServer interface {
	Register(context.Context, *RegisterRquest) (*RegisterResponse, error)
	Verify(context.Context, *VerifyRequest) (*VerifyResponse, error)
	Shorten(context.Context, *ShortenRequest) (*ShortenResponse, error)
	Get(context.Context, *GetRequest) (*GetResponse, error)
	mustEmbedUnimplementedShorturlServer()
}

// UnimplementedShorturlServer must be embedded to have forward compatible implementations.
type UnimplementedShorturlServer struct {
}

func (UnimplementedShorturlServer) Register(context.Context, *RegisterRquest) (*RegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedShorturlServer) Verify(context.Context, *VerifyRequest) (*VerifyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Verify not implemented")
}
func (UnimplementedShorturlServer) Shorten(context.Context, *ShortenRequest) (*ShortenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Shorten not implemented")
}
func (UnimplementedShorturlServer) Get(context.Context, *GetRequest) (*GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedShorturlServer) mustEmbedUnimplementedShorturlServer() {}

// UnsafeShorturlServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShorturlServer will
// result in compilation errors.
type UnsafeShorturlServer interface {
	mustEmbedUnimplementedShorturlServer()
}

func RegisterShorturlServer(s grpc.ServiceRegistrar, srv ShorturlServer) {
	s.RegisterService(&Shorturl_ServiceDesc, srv)
}

func _Shorturl_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRquest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShorturlServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shorturl.shorturl/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShorturlServer).Register(ctx, req.(*RegisterRquest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shorturl_Verify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShorturlServer).Verify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shorturl.shorturl/Verify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShorturlServer).Verify(ctx, req.(*VerifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shorturl_Shorten_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShortenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShorturlServer).Shorten(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shorturl.shorturl/Shorten",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShorturlServer).Shorten(ctx, req.(*ShortenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shorturl_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShorturlServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shorturl.shorturl/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShorturlServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Shorturl_ServiceDesc is the grpc.ServiceDesc for Shorturl service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Shorturl_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "shorturl.shorturl",
	HandlerType: (*ShorturlServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _Shorturl_Register_Handler,
		},
		{
			MethodName: "Verify",
			Handler:    _Shorturl_Verify_Handler,
		},
		{
			MethodName: "Shorten",
			Handler:    _Shorturl_Shorten_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _Shorturl_Get_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "shorturl.proto",
}
